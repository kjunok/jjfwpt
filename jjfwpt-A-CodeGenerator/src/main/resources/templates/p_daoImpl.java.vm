package com.jjkj.dao.impl;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.data.elasticsearch.core.aggregation.AggregatedPage;
import org.springframework.stereotype.Component;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.jjkj.dao.mapper.${entity}Mapper;
import com.jjkj.dao.${cfg.UpModuleName}InfoDao;
import com.jjkj.model.${entity};

@Component
public class ${cfg.UpModuleName}InfoDaoImpl extends ServiceImpl<${entity}Mapper, ${entity}> implements ${cfg.UpModuleName}InfoDao {

    @Override
    public ${entity} search${cfg.UpModuleName}ByParam(Map param) {
        ${entity} ${cfg.ModuleName}Info=baseMapper.get${cfg.UpModuleName}Info(MybatisUtil.getConditionMap(param));
        return ${cfg.ModuleName}Info;
    }

    @Override
    public List<${entity}> search${cfg.UpModuleName}ListByParam(Map param) {
        List<${entity}> ${cfg.ModuleName}InfoList=baseMapper.get${cfg.UpModuleName}InfoList(MybatisUtil.getConditionMap(param));
        return ${cfg.ModuleName}InfoList;
    }

    @Override
    public IPage<${entity}> search${cfg.UpModuleName}PageByParam(Map param) {
        Page page=MybatisUtil.getPage(param);
        String keyword=(String)param.get("keyword");
        if(StringUtil.isNotBlank(keyword)){
            AggregatedPage<${entity}> ${cfg.ModuleName}Infos=
                    elasticSearchDao.search(keyword,${entity}.class,Integer.parseInt(page.getCurrent()+""),Integer.parseInt(page.getSize()+""));
            page.setTotal(${cfg.ModuleName}Infos.getTotalElements());
            page.setRecords(${cfg.ModuleName}Infos.getContent());
            return page;
        }else{
            return baseMapper.get${cfg.UpModuleName}InfoPage(page,MybatisUtil.getConditionMap(param));
        }
    }

    @Override
    public Boolean saveOrUpdate${cfg.UpModuleName}(${entity} ${cfg.ModuleName}Info) {
        Boolean flag=this.saveOrUpdate(${cfg.ModuleName}Info);
        elasticSearchDao.createIndex(${cfg.ModuleName}Info,"getId");
        return flag;
    }
    @Override
    public Boolean del${cfg.UpModuleName}(String[] ids) {
        Boolean flag=this.removeByIds(Arrays.asList(ids));
        elasticSearchDao.deleteIndex(${entity}.class,ids);
        return  flag;
    }
}
